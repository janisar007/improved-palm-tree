name: Repository Status Aggregator

on:
  schedule:
    - cron: '*/15 * * * *'  # Runs every 15 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  trigger-workflows:
    runs-on: ubuntu-latest
    name: Trigger and monitor all workflows
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get all workflow files
      id: get-workflows
      run: |
        WORKFLOWS=$(find .github/workflows -name "*.yml" -not -name "aggregator.yml" -exec basename {} \;)
        echo "WORKFLOWS<<EOF" >> $GITHUB_OUTPUT
        echo "$WORKFLOWS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Trigger workflows one-by-one
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
        while read -r file; do
          echo "Triggering workflow: $file"
          gh workflow run "$file" -R "${{ github.repository }}"
          sleep 5  # slight delay to avoid API throttling
        done <<< "${{ steps.get-workflows.outputs.WORKFLOWS }}"

    - name: Wait for workflows to finish
      run: sleep 180  # Adjust based on average workflow runtime

    - name: Get workflow run statuses
      id: workflow-status
      uses: actions/github-script@v6
      with:
        script: |
          const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });

          const workflowStatus = {};
          const workflowNames = [];

          runs.workflow_runs.forEach(run => {
            if (!workflowStatus[run.name] && run.name !== 'Repository Status Aggregator') {
              workflowStatus[run.name] = {
                conclusion: run.conclusion,
                html_url: run.html_url,
                created_at: run.created_at
              };
              workflowNames.push(run.name);
            }
          });

          core.setOutput('status', JSON.stringify(workflowStatus));
          core.setOutput('names', workflowNames.join(','));

    - name: Create status report
      run: |
        echo "# Workflow Status Report" > report.md
        echo "Generated at $(date)" >> report.md
        echo "" >> report.md

        echo '${{ steps.workflow-status.outputs.status }}' > status.json
        STATUS=$(jq -r 'to_entries[] | "\(.key): \(.value.conclusion)"' status.json)

        echo "## Workflow Results" >> report.md
        echo "" >> report.md
        echo "| Workflow Name | Status | Details |" >> report.md
        echo "|---------------|--------|---------|" >> report.md

        while read -r line; do
          name=$(echo "$line" | cut -d':' -f1)
          status=$(echo "$line" | cut -d':' -f2 | xargs)
          url=$(jq -r ".\"$name\".html_url" status.json)
          echo "| $name | $status | [View Run]($url) |" >> report.md
        done <<< "$STATUS"

        TOTAL=$(echo "$STATUS" | wc -l)
        SUCCESS=$(echo "$STATUS" | grep -i "success" | wc -l)
        FAILED=$(echo "$STATUS" | grep -iv "success" | wc -l)

        echo "" >> report.md
        echo "## Summary" >> report.md
        echo "- ✅ $SUCCESS workflows passed" >> report.md
        echo "- ❌ $FAILED workflows failed" >> report.md
        echo "- 🔄 $TOTAL workflows total" >> report.md

    - name: Create PR with status report
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.PAT }}
        commit-message: "Update workflow status report"
        title: "Workflow Status Report - $(date +'%Y-%m-%d %H:%M')"
        body-file: report.md
        branch: "workflow-status-report"
        delete-branch: true
        labels: "automated,status-report"
